---
title: "Exercice 2.01"
author: "Clément Poupelin"
date: "2025-02-xx"
date-modified: "`r Sys.Date()`"
format: 
  html:
    embed-resources: false
    toc: true
    code-fold: true
    code-summary: "Show the code"
    code-tools: true
    toc-location: right
    page-layout: article
    code-overflow: wrap
toc: true
number-sections: false
editor: visual
categories: ["Fiche 2", "Marche aléatoire", "Signal linéraire bruité"]
image: ""
description: "L'objectif de ce document est détudier la différence entre une **marche aléatoire** et un **signal linéraire bruité**"
---



# Intervenant.e.s

### Rédaction

-   **Clément Poupelin**, [clementjc.poupelin\@gmail.com](mailto:clementjc.poupelin@gmail.com){.email}\

### Relecture

-   

# Setup

:::: panel-tabset
## Packages

```{r, setup, warning=FALSE, message=FALSE}
# Données
library(dplyr)        # manipulation des données

library(latex2exp)

# Plots
## ggplot
library(ggplot2)
library(gridExtra)
```

## Fonctions

::: panel-tabset

### Marche aléatoire

```{r}
random_walk <- function(n, delta) {
  w <- rnorm(n)  
  drift <- delta * seq(1, n)  
  
  x <- drift + cumsum(w)
  return(x)  
}
```

### Signal linéaire bruité

```{r}
noisy_serie <- function(n, delta) {
  w <- rnorm(n, sd = 1)  
  drift <- delta * seq(1, n) 
  
  x <- drift + w
  return(x)  
}
```

## Plot des simulations

```{r}
plot_simulation_time_series <- function(data, main_title, y_lab) {
  plot_data <- data.frame(
    Time = rep(1:n, I),
    Value = as.vector(data),
    Group = rep(1:I, each = n)
  )
  
  ggplot(plot_data, aes(
    x = Time,
    y = Value,
    group = Group,
    color = factor(Group)
  )) +
    geom_line() +
    scale_color_viridis_d(name = "Time séries")  +
    labs(title = main_title,
    x = "Time",
    y = y_lab) +
    theme_minimal() + 
    theme(legend.title = element_text(size = 18),
          legend.text = element_text(size = 12),
          axis.title = element_text(size = 16),
          axis.text = element_text(size = 14),
          plot.title = element_text(size = 18, face = "bold"))
  
}
```



:::

## Seed
```{r}
set.seed(140400)
```


::::

# Données

Pour cette exercice, nous allons étudier deux types de séries temporelles : **les marches aléatoires** et **les signaux linéaires bruités**.

Pour cela nous allons simuler : 

- dix marches aléatoires $(x_t)_t$ avec dérive de longueur $n=100$, de paramètre $\delta=.01$ et de variance $\sigma_W^2=1$ pour le bruit.

- dix séries $(x_t)_t$ de la forme $x_t = \delta_t + w_t$ (tendance+bruit blanc) de longueur $n = 100$, de paramètre $\delta = .01$ et de variance $\sigma^2_W = 1$

::: callout-note
Si on pose que $x_0 = w_0$, on peut écrire notre marche aléatoire comme $x_t = \delta t + \sum_{i=0}^{t}w_i$
:::

```{r}
n <- 100      ## length    
delta <- .01  ## drift parameter   
I <- 10       ## number of series
```

::: panel-tabset

## Marche aléatoire

```{r}
sim <- t(simplify2array(lapply(1:I, function(i) random_walk(n, delta))))

```

```{r, fig.height=8, fig.width=12}
plot_simulation_time_series(sim, main_title = TeX(paste("Simulation of", I, "Random Walks with drift $\\delta$ =", delta)), y_lab = "Random Walk")
```

## Signal linéaire bruité

```{r}
sim2 <- t(simplify2array(lapply(1:I, function(i) noisy_serie(n, delta))))
```

```{r, fig.height=8, fig.width=12}
plot_simulation_time_series(sim2, main_title = paste("Simulation of", I, "linear noisy series"), y_lab = "Noisy serie")
```
:::

# Estimation du modèle de régression linéaire

::: panel-tabset

## Marche aléatoire

```{r}
sim_coeff <- apply(sim, 1, function(x) {
  mod <- lm(x ~ 0 + seq(1, n))  # Régression sans intercept
  return(mod$coefficients)  # Retourner le coefficient de la régression
})
```


## Signal linéaire bruité

```{r}
sim2_coeff <- apply(sim2, 1, function(x) {
  mod <- lm(x ~ 0 + seq(1, n))  # Régression sans intercept
  return(mod$coefficients)  # Retourner le coefficient de la régression
})
```

:::

Avec ces résulats, nous pouvons par la suite représenter sur un même graphique les dix droites estimées et la tendance moyenne théorique $\delta_t=.01t$.

::: panel-tabset

## Marche aléatoire

```{r}
time <- seq(1, n)

# Créer un data.frame pour les courbes simulées
sim_data <- data.frame(
  time = rep(time, I),
  value = unlist(lapply(1:I, function(i) sim_coeff[i] * time)),
  group = rep(1:I, each = n)
)

# Créer la ligne théorique
theoretical_trend <- data.frame(
  time = time,
  value = 0.01 * time,
  group = "Theoretical Trend"
)

# Plot avec ggplot
library(ggplot2)

ggplot(sim_data, aes(x = time, y = value, group = group, color = factor(group))) +
  geom_line(size = .5, color = "orange") +  # Courbes simulées
  geom_line(data = theoretical_trend, aes(x = time, y = value), color = "red", linetype = "dashed", size = 1.) +  # Ligne théorique
  labs(
    title = "Graphe of the estimations",
    x = "Time",
    y = "Estimated values",
    color = "Simulated Curves"
  ) +
  scale_color_manual(values = rep("orange", I)) +  # Couleur orange pour toutes les courbes simulées
  theme_minimal() +
  theme(legend.position = "topleft") +
  annotate("text", x = 10, y = 9, label = TeX("Theoretical trend $\\delta_t = 0.01t$"), color = "red", hjust = 0)
```


:::: success-header
::: success-icon
:::

Résultats
::::

::: success
METTRE LES CONCLUSIONS
:::

## Signal linéaire bruité
```{r}
time <- seq(1, n)

# Créer un data.frame pour les courbes simulées
sim_data <- data.frame(
  time = rep(time, I),
  value = unlist(lapply(1:I, function(i) sim2_coeff[i] * time)),
  group = rep(1:I, each = n)
)

# Créer la ligne théorique
theoretical_trend <- data.frame(
  time = time,
  value = 0.01 * time,
  group = "Theoretical Trend"
)


ggplot(sim_data, aes(x = time, y = value, group = group, color = factor(group))) +
  geom_line(size = .5, color = "orange") +  # Courbes simulées
  geom_line(data = theoretical_trend, aes(x = time, y = value), color = "red", linetype = "dashed", size = 1.) +  # Ligne théorique
  labs(
    title = "Graphe of the estimations",
    x = "Time",
    y = "Estimated values",
    color = "Simulated Curves"
  ) +
  scale_color_manual(values = rep("orange", I)) +  # Couleur orange pour toutes les courbes simulées
  theme_minimal() +
  theme(legend.position = "topleft") +
  annotate("text", x = 10, y = 9, label = TeX("Theoretical trend $\\delta_t = 0.01t$"), color = "red", hjust = 0)
```



:::: success-header
::: success-icon
:::

Résultats
::::

::: success
METTRE LES CONCLUSIONS
:::


:::



# Conclusion

Nos avonc pu observé que blablabla

# Session info

```{r}
sessioninfo::session_info(pkgs = "attached")
```



