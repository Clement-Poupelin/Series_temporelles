{
  "hash": "6e405a5e096fa339686df6a9f24e22c3",
  "result": {
    "markdown": "---\ntitle: \"Exercice 2.03\"\nauthor: \"Clément Poupelin\"\ndate: \"2025-03-xx\"\ndate-modified: \"2025-03-03\"\nformat: \n  html:\n    embed-resources: false\n    toc: true\n    code-fold: true\n    code-summary: \"Show the code\"\n    code-tools: true\n    toc-location: right\n    page-layout: article\n    code-overflow: wrap\ntoc: true\nnumber-sections: false\neditor: visual\ncategories: [\"Fiche 2\"]\nimage: \"\"\ndescription: \"\"\n---\n\n\n# Intervenant.e.s\n\n### Rédaction\n\n-   **Clément Poupelin**, [clementjc.poupelin\\@gmail.com](mailto:clementjc.poupelin@gmail.com){.email}\\\n\n### Relecture\n\n-   \n\n# Setup\n\n:::: panel-tabset\n## Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Données\nlibrary(dplyr)        # manipulation des données\n\n# Esthétique\nlibrary(latex2exp)   ## TeX\nlibrary(ggplot2)     ## ggplot\n```\n:::\n\n\n## Fonctions\n\n::: panel-tabset\n\n### Série temporelle simulée\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSim_serie <- function(m, c) {\n  eps <- rnorm(m + 100)  \n  x <- rep(NA, m + 100) \n  \n  # On suppose pour notre condition initial\n  x[1] <- eps[1] \n  for (i in (2:(m + 100))) {\n    x[i] <- eps[i] - c * x[i - 1]\n  }\n  x_final <- x[101:(m + 100)]\n  return(ts(x_final))  \n}\n```\n:::\n\n\n### Plot de séries temporelles\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggTimeSerie <- function(ts, c) {\n  df_series <- data.frame(Time = seq_along(ts), X_t = ts)\n  \n  p <- ggplot(df_series, aes(x = Time, y = X_t)) +\n    geom_line(color = \"red\") +\n    labs(title = TeX(paste0(\n      \"Série $X_m$ pour c = \", c\n    )),\n    x = \"Time\",\n    y = \"Simulated series\") +\n    theme_minimal()\n  \n  return(p)\n}\n```\n:::\n\n\n### Plot pour ACF et PACF\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggACF <- function(ts, c) {\n  acf_data <- acf(ts, plot = FALSE)\n  df_acf <- data.frame(Lag = acf_data$lag, ACF = acf_data$acf)\n  \n  pacf_data <- pacf(ts, plot = FALSE)\n  df_pacf <- data.frame(Lag = pacf_data$lag, PACF = pacf_data$acf)\n  \n  # Intervalle de confiance\n  ci <- qnorm((1 + 0.95) / 2) / sqrt(length(ts))\n  \n  # ACF\n  p_acf <- ggplot(df_acf, aes(x = Lag, y = ACF)) +\n    geom_segment(aes(xend = Lag, yend = 0), color = \"red\") +\n    geom_point(color = \"red\") +\n    labs(\n      title = paste0(\"Autocorrelation Function (ACF) \\n pour c = \", c),\n      x = \"Lag\",\n      y = \"ACF\"\n    ) +\n    geom_hline(\n      yintercept = c(-ci, ci),\n      color = \"blue\",\n      linetype = \"dashed\"\n    ) +\n    theme_minimal()\n  \n  # PACF\n  p_pacf <- ggplot(df_pacf, aes(x = Lag, y = PACF)) +\n    geom_segment(aes(xend = Lag, yend = 0), color = \"red\") +\n    geom_point(color = \"red\") +\n    labs(\n      title = paste0(\"Partial Autocorrelation Function (PACF) \\n pour c = \", c),\n      x = \"Lag\",\n      y = \"PACF\"\n    ) +\n    geom_hline(\n      yintercept = c(-ci, ci),\n      color = \"blue\",\n      linetype = \"dashed\"\n    ) +\n    theme_minimal()\n  \n  return(list(ACF = p_acf, PACF = p_pacf))\n}\n```\n:::\n\n\n:::\n\n## Seed\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(140400)\n```\n:::\n\n::::\n\n# Données\n\nPour cette exercice, nous allons utiliser une fonction pour simuler des trajectoires de processus défini par l’équation de récurrence $X_m + cX_{m−1} = \\varepsilon_m$ où $(\\varepsilon_m)$ est une suite de variables aléatoires centrées iid (indépendantes et identiquement distribuées).\n\n::: callout-note\nPour obtenir une série de longueur $m$, simuler $m + 100$ valeurs et supprimer les $100$ premières valeurs pour atténuer l’effet de l’initialisation, nous pouvons utiliser la fonction *`filter`*.\n:::\n\n\nNotre objectif ici va être, pour $|c| = 0, .5, .9$, de tracer une trajectoire simulée afin d'observer l'impact de $c$ dans celle ci.\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- 500\nc <- c(-0.9, -0.5, 0, 0.5, 0.9)\n\nSim_mat <- list()\nfor (i in seq_along(c)){ \n  Sim_mat[[i]] <- Sim_serie(m, c[i])\n}\n```\n:::\n\n\n# ACF\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngridExtra::grid.arrange(ggTimeSerie(Sim_mat[[1]], c[1]),\n                        ggTimeSerie(Sim_mat[[2]], c[2]),\n                        ggTimeSerie(Sim_mat[[3]], c[3]), \n                        ggTimeSerie(Sim_mat[[4]], c[4]),\n                        ggTimeSerie(Sim_mat[[5]], c[5]), \n                        ncol = 5)\n```\n\n::: {.cell-output-display}\n![](Exercice_02.03_files/figure-html/unnamed-chunk-6-1.png){width=1920}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngridExtra::grid.arrange(ggACF(Sim_mat[[1]], c[1])$ACF,\n                        ggACF(Sim_mat[[2]], c[2])$ACF,\n                        ggACF(Sim_mat[[3]], c[3])$ACF, \n                        ggACF(Sim_mat[[4]], c[4])$ACF,\n                        ggACF(Sim_mat[[5]], c[5])$ACF, \n                        ncol = 5)\n```\n\n::: {.cell-output-display}\n![](Exercice_02.03_files/figure-html/unnamed-chunk-7-1.png){width=1920}\n:::\n:::\n\n\n\n:::: success-header\n::: success-icon\n:::\n\nRésultats\n::::\n\n::: success\n On remarque qu'au moment où nos paramètres sont proche de $1$ ou $-1$, nos autocorrélations sont forte et notre série perd en stationnarité. En effet, on remarque que le processus est un AR(1) avec son acf qui décroit exponentiellement et la stationnarité se perd quand $|c| \\longrightarrow 1$.\n\nOn remarque également que, qand $c=0$, on a un bruit blanc.\n:::\n\n# PACF\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngridExtra::grid.arrange(ggTimeSerie(Sim_mat[[1]], c[1]),\n                        ggTimeSerie(Sim_mat[[2]], c[2]),\n                        ggTimeSerie(Sim_mat[[3]], c[3]), \n                        ggTimeSerie(Sim_mat[[4]], c[4]),\n                        ggTimeSerie(Sim_mat[[5]], c[5]), \n                        ncol = 5)\n```\n\n::: {.cell-output-display}\n![](Exercice_02.03_files/figure-html/unnamed-chunk-8-1.png){width=1920}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngridExtra::grid.arrange(ggACF(Sim_mat[[1]], c[1])$PACF,\n                        ggACF(Sim_mat[[2]], c[2])$PACF,\n                        ggACF(Sim_mat[[3]], c[3])$PACF, \n                        ggACF(Sim_mat[[4]], c[4])$PACF,\n                        ggACF(Sim_mat[[5]], c[5])$PACF, \n                        ncol = 5)\n```\n\n::: {.cell-output-display}\n![](Exercice_02.03_files/figure-html/unnamed-chunk-9-1.png){width=1920}\n:::\n:::\n\n\n\n:::: success-header\n::: success-icon\n:::\n\nRésultats\n::::\n\n::: success\nencore une fois, On reconnait alors les caractéristiques d'un AR(1) au vu des ACF et PACF. Et le cas de $c=0$ apparait plus clairement comme celui d'un bruit blanc. <br>\n\n:::\n\n\n# Conclusion\n\nici on a pu voir l'impact du paramètre c dans les séries de type AR(1) via les ACF et PACF.\n\n# Session info\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessioninfo::session_info(pkgs = \"attached\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.1 (2022-06-23 ucrt)\n os       Windows 10 x64 (build 22631)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  French_France.utf8\n ctype    French_France.utf8\n tz       Europe/Paris\n date     2025-03-03\n pandoc   3.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package   * version date (UTC) lib source\n dplyr     * 1.1.4   2023-11-17 [1] CRAN (R 4.2.3)\n ggplot2   * 3.5.1   2024-04-23 [1] CRAN (R 4.2.3)\n latex2exp * 0.9.6   2022-11-28 [1] CRAN (R 4.2.3)\n\n [1] C:/Users/cleme/AppData/Local/R/win-library/4.2\n [2] C:/Program Files/R/R-4.2.1/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n",
    "supporting": [
      "Exercice_02.03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}